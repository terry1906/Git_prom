import sqlite3
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLineEdit, QMessageBox, QTableWidget, \
    QTableWidgetItem, QHBoxLayout, QLabel, QScrollArea
from PyQt6.QtGui import QPixmap


def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # Create users table if it doesn't exist
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            name TEXT
        )
    ''')

    # Create orders table to store order history
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            order_details TEXT NOT NULL,
            status TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users(id)
        )
    ''')

    conn.commit()
    conn.close()


class MenuItem:
    def __init__(self, name, price):
        self.name = name
        self.price = price


# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class MainWindow(QWidget):
    def __init__(self, user_id):
        super().__init__()
        self.setWindowTitle("–ú–µ–Ω—é –ú–∞–∫–¥–æ–Ω–∞–ª—å–¥—Å–∞")

        # –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
        self.menu_items = [
            MenuItem("üçî–ß–∏–∑–±—É—Ä–≥–µ—Äüçî", 180),
            MenuItem("üçü–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏üçü", 100),
            MenuItem("ü•§–ù–∞–ø–∏—Ç–æ–∫ü•§", 50),
            MenuItem("ü•ü–ù–∞–≥–≥–µ—Ç—Å—ãü•ü", 200),
            MenuItem("ü•ó–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—åü•ó", 250),
            MenuItem("ü•õ–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—åü•õ", 120),
            MenuItem("üçî–§–∏—à–±—É—Ä–≥–µ—Ä—ãüçî", 160),
            MenuItem("ü•Æ–ü–∏—Ä–æ–∂–æ–∫ —Å –≤–∏—à–Ω–µ–πü•Æ", 70),
            MenuItem("‚òï–ö–æ—Ñ–µ‚òï", 90)
        ]

        self.cart = []
        self.order_history = []
        self.user_id = user_id
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()

        # –ú–µ–Ω—é
        for item in self.menu_items:
            h_layout = QHBoxLayout()
            h_layout.addWidget(QLabel(f"{item.name} - {item.price} ‚ÇΩ"))
            button = QPushButton("+")
            button.clicked.connect(lambda checked, item=item: self.add_to_cart(item))
            h_layout.addWidget(button)
            scroll_layout.addLayout(h_layout)

        scroll_widget.setLayout(scroll_layout)
        scroll.setWidget(scroll_widget)

        layout.addWidget(scroll)

        # –ö–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        button_cart = QPushButton("–ö–æ—Ä–∑–∏–Ω–∞")
        button_cart.clicked.connect(self.open_cart)
        layout.addWidget(button_cart)

        button_history = QPushButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
        button_history.clicked.connect(self.open_order_history)
        layout.addWidget(button_history)

        self.setLayout(layout)

    def add_to_cart(self, item):
        self.cart.append(item)
        QMessageBox.information(self, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É", f"{item.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    def open_cart(self):
        if not self.cart:
            QMessageBox.information(self, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        self.cart_window = CartWindow(self.cart, self.order_history, self.user_id)
        self.cart_window.show()

    def open_order_history(self):
        self.history_window = OrderHistoryWindow(self.user_id)
        self.history_window.show()


class CartWindow(QWidget):
    def __init__(self, cart, order_history, user_id):
        super().__init__()
        self.setWindowTitle("–ö–æ—Ä–∑–∏–Ω–∞")
        self.cart = cart
        self.order_history = order_history
        self.user_id = user_id
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        self.cart_table = QTableWidget()
        self.cart_table.setRowCount(len(self.cart))
        self.cart_table.setColumnCount(3)
        self.cart_table.setHorizontalHeaderLabels(["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞ (—Ä—É–±)", "–£–¥–∞–ª–∏—Ç—å"])

        for row, item in enumerate(self.cart):
            self.cart_table.setItem(row, 0, QTableWidgetItem(item.name))
            self.cart_table.setItem(row, 1, QTableWidgetItem(str(item.price)))
            remove_button = QPushButton("–£–±—Ä–∞—Ç—å")
            remove_button.clicked.connect(lambda checked, row=row: self.remove_item(row))
            self.cart_table.setCellWidget(row, 2, remove_button)

        layout.addWidget(self.cart_table)

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        order_button = QPushButton("–ó–∞–∫–∞–∑–∞—Ç—å")
        order_button.clicked.connect(self.open_order_dialog)
        layout.addWidget(order_button)

        back_button = QPushButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        back_button.clicked.connect(self.close)
        layout.addWidget(back_button)

        self.setLayout(layout)

    def remove_item(self, row):
        item_name = self.cart[row].name
        self.cart.pop(row)  # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        QMessageBox.information(self, "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", f"{item_name} —É–±—Ä–∞–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
        self.refresh_cart()

    def refresh_cart(self):
        self.cart_table.setRowCount(len(self.cart))
        for row, item in enumerate(self.cart):
            self.cart_table.setItem(row, 0, QTableWidgetItem(item.name))
            self.cart_table.setItem(row, 1, QTableWidgetItem(str(item.price)))
            remove_button = QPushButton("–£–±—Ä–∞—Ç—å")
            remove_button.clicked.connect(lambda checked, row=row: self.remove_item(row))
            self.cart_table.setCellWidget(row, 2, remove_button)

    def open_order_dialog(self):
        if not self.cart:
            QMessageBox.information(self, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
            return
        self.order_dialog = OrderDialog(self.cart, self.user_id)
        self.order_dialog.show()
        self.close()


class OrderDialog(QWidget):
    def __init__(self, cart, user_id):
        super().__init__()
        self.setWindowTitle("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã")
        self.cart = cart
        self.user_id = user_id
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        self.card_number_input = QLineEdit()
        self.card_number_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã")
        layout.addWidget(self.card_number_input)

        pay_button = QPushButton("–û–ø–ª–∞—Ç–∏—Ç—å")
        pay_button.clicked.connect(self.confirm_order)
        layout.addWidget(pay_button)

        self.setLayout(layout)

    def confirm_order(self):
        # Check card validity or promo code
        valid_promo_codes = ["DISCOUNT10", "FREESHIP", "WELCOME50", "NEWYEAR15", "–ø–∂100–±–∞–ª–ª–æ–≤", "NEWYEAR", "MACMENU", "1"]
        card_number = self.card_number_input.text()
        if len(card_number) == 16 and card_number.isdigit() or card_number in valid_promo_codes:
            # Save the order in the database
            order_details = ', '.join([item.name for item in self.cart])
            self.save_order(order_details)
            self.cart.clear()  # Empty the cart
            QMessageBox.information(self, "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!")
            self.close()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    def save_order(self, order_details):
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()

        # Insert order into orders table
        cursor.execute('INSERT INTO orders (user_id, order_details, status) VALUES (?, ?, ?)',
                       (self.user_id, order_details, "–û–ø–ª–∞—á–µ–Ω"))

        conn.commit()
        conn.close()


class OrderHistoryWindow(QWidget):
    def __init__(self, user_id):
        super().__init__()
        self.setWindowTitle("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
        self.user_id = user_id
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        self.history_table = QTableWidget()
        self.history_table.setRowCount(0)
        self.history_table.setColumnCount(2)
        self.history_table.setHorizontalHeaderLabels(["–ó–∞–∫–∞–∑", "–°—Ç–∞—Ç—É—Å"])

        # Fetch order history from the database
        self.load_order_history()

        layout.addWidget(self.history_table)

        back_button = QPushButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        back_button.clicked.connect(self.close)
        layout.addWidget(back_button)

        self.setLayout(layout)

    def load_order_history(self):
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()

        # Fetch orders for the current user
        cursor.execute('SELECT order_details, status FROM orders WHERE user_id=?', (self.user_id,))
        orders = cursor.fetchall()

        conn.close()

        # Add each order to the table
        for order in orders:
            order_details, status = order
            row_position = self.history_table.rowCount()
            self.history_table.insertRow(row_position)
            self.history_table.setItem(row_position, 0, QTableWidgetItem(order_details))
            self.history_table.setItem(row_position, 1, QTableWidgetItem(status))
